use mongodb::bson::oid::ObjectId;
use serde::{Deserialize, Serialize};

/// Base User model
/// Represents the data structure of a user document in the database.
/// All fields are required. The derived structs are used for checking the validity of the data from users.
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct User {
    pub _id: ObjectId,
    pub email: String,
    pub firebase_id: String,
    pub categories: Vec<String>,
    // Comment out api keys for now till I figure out how to better handle them
    // TODO: Figure out how to handle api keys
    // pub api_key: String,
}

impl User {
    pub fn new(
        email: String,
        firebase_id: String,
        categories: Vec<String>,
        // api_key: String,
    ) -> Self {
        User {
            _id: ObjectId::new(),
            email,
            firebase_id,
            categories,
            // api_key,
        }
    }
}

/// New User model
/// Represents the data structure of data required to create a new user. Based on the User model.
/// All fields are required.
/// The api_key field is omitted as it is generated by the server.
/// The categories field is omitted as it will be added in a separate request. The user will not be able to add transactions until they have added categories.
#[derive(Debug, Deserialize, Serialize)]
pub struct NewUserRequest {
    pub email: String,
    pub firebase_id: String,
}

/// UserCategories model
/// Represents the data structure of data required to update a user's categories.
#[derive(Debug, Deserialize, Serialize)]
pub struct UserCategories {
    pub email: String,
    pub categories: Vec<String>,
}
